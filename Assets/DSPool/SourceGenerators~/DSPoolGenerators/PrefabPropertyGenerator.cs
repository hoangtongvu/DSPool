using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;

namespace DSPoolGenerators;

[Generator]
public class PrefabPropertyGenerator : IIncrementalGenerator
{
    private readonly record struct TransformedInfo(string FullPrefabTypeName, string PoolName, string PoolDisplayName, string PoolNamespace);

    private static readonly HashSet<string> attributeNames =
    [
        "DSPoolUsePrefab",
        "DSPool.DSPoolUsePrefab",
        "DSPoolUsePrefabAttribute",
        "DSPool.DSPoolUsePrefabAttribute",
    ];

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (syntaxNode, _) => IsTargetNode(syntaxNode),
                transform: static (context, _) => Transform(context));

        context.RegisterSourceOutput(provider, Generate);
    }

    private static bool IsTargetNode(SyntaxNode syntaxNode)
    {
        return syntaxNode is AttributeSyntax attributeSyntax
            && attributeNames.Contains(attributeSyntax.Name.ToString());
    }

    private static TransformedInfo Transform(GeneratorSyntaxContext context)
    {
        var sm = context.SemanticModel;
        var attributeSyntax = (AttributeSyntax)context.Node;

        var attributeArgumentExpression = attributeSyntax.ArgumentList.Arguments[0].Expression;
        var prefabTypeInfo = sm.GetTypeInfo(((TypeOfExpressionSyntax)attributeArgumentExpression).Type);

        var poolDeclaration = (ClassDeclarationSyntax)attributeSyntax.Parent?.Parent;
        var poolTypeInfo = sm.GetDeclaredSymbol(poolDeclaration);

        return new(
            prefabTypeInfo.Type.ToDisplayString()
            , poolTypeInfo.Name
            , poolTypeInfo.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat)
            , poolTypeInfo.ContainingNamespace.ToDisplayString());
    }

    private static void Generate(SourceProductionContext context, TransformedInfo transformedInfo)
    {
        GeneratePrefabProperty(context, transformedInfo);
    }

    private static void GeneratePrefabProperty(SourceProductionContext context, TransformedInfo transformedInfo)
    {
        var sourceCode = $@"// <auto-generated />
namespace {transformedInfo.PoolNamespace}
{{
    public partial class {transformedInfo.PoolDisplayName}
    {{
        public {transformedInfo.FullPrefabTypeName} Prefab {{ get; set; }}
    }}
}}
";

        context.AddSource($"{transformedInfo.PoolNamespace}.{transformedInfo.PoolName}.PrefabProperty.g.cs", sourceCode);
    }

}
