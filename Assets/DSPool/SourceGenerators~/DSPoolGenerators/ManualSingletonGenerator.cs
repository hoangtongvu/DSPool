using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using static DSPoolGenerators.Utilities;

namespace DSPoolGenerators;

[Generator]
public class ManualSingletonGenerator : IIncrementalGenerator
{
    private readonly record struct TransformedInfo(string PoolName, string PoolNamespace);

    private static readonly HashSet<string> attributeNames =
    [
        "DSPoolManualSingleton",
        "DSPool.DSPoolManualSingleton",
        "DSPoolManualSingletonAttribute",
        "DSPool.DSPoolManualSingletonAttribute",
    ];

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (syntaxNode, _) => IsTargetNode(syntaxNode),
                transform: static (context, _) => Transform(context));

        context.RegisterSourceOutput(provider, Generate);
    }

    private static bool IsTargetNode(SyntaxNode syntaxNode)
    {
        return syntaxNode is AttributeSyntax attributeSyntax
            && attributeNames.Contains(attributeSyntax.Name.ToString());
    }

    private static TransformedInfo Transform(GeneratorSyntaxContext context)
    {
        var attributeSyntax = (AttributeSyntax)context.Node;
        var poolDeclaration = (ClassDeclarationSyntax)attributeSyntax.Parent?.Parent;

        return new(poolDeclaration.Identifier.ToString(), GetNamespace(poolDeclaration));
    }

    private static void Generate(SourceProductionContext context, TransformedInfo transformedInfo)
    {
        GenerateManualSingleton(context, transformedInfo);
    }

    private static void GenerateManualSingleton(SourceProductionContext context, TransformedInfo transformedInfo)
    {
        var sourceCode = $@"// <auto-generated />
using System;
using UnityEngine;

namespace {transformedInfo.PoolNamespace}
{{
    public partial class {transformedInfo.PoolName}
    {{
        private static bool isInstanceInitialized;
        private static {transformedInfo.PoolName} instance;
        public static {transformedInfo.PoolName} Instance => instance ?? throw new NullReferenceException(""{transformedInfo.PoolName}_Singleton hasn't been initialized"");

        public static bool IsInstanceInitialized => isInstanceInitialized;

        public static void InitializeInstance({transformedInfo.PoolName} newInstance)
        {{
            if (newInstance == null) throw new NullReferenceException(""Can not initialize null instance for {transformedInfo.PoolName}_Singleton"");
            isInstanceInitialized = true;
            instance = newInstance;
        }}

        public static void DestroyInstance()
        {{
            isInstanceInitialized = false;
            instance = null;
        }}

#if UNITY_EDITOR

        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
        public static void ClearOnLoad() => DestroyInstance();

#endif
    }}
}}
";

        context.AddSource($"{transformedInfo.PoolNamespace}.{transformedInfo.PoolName}.ManualSingleton.g.cs", sourceCode);
    }

}
